import streamlit as st
import pandas as pd
import datetime
import json
import requests
from io import BytesIO
import base64

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Auxiliar Pr√©-Operat√≥rio",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para estilizar a aplica√ß√£o
def local_css():
    st.markdown("""
    <style>
        .main {
            background-color: #f5f7fa;
        }
        .st-emotion-cache-18ni7ap {
            background-color: #e8eef7;
        }
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
        }
        h1, h2, h3 {
            color: #2c3e50;
        }
        .stButton>button {
            background-color: #3498db;
            color: white;
            border-radius: 5px;
            padding: 0.5rem 1rem;
            border: none;
        }
        .stButton>button:hover {
            background-color: #2980b9;
        }
        .risk-high {
            color: #e74c3c;
            font-weight: bold;
        }
        .risk-medium {
            color: #f39c12;
            font-weight: bold;
        }
        .risk-low {
            color: #2ecc71;
            font-weight: bold;
        }
        .info-box {
            background-color: #d4edff;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
        }
        .warning-box {
            background-color: #ffe0d4;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
        }
        .success-box {
            background-color: #d4ffec;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
        }
    </style>
    """, unsafe_allow_html=True)

# Aplicar o CSS
local_css()

# Fun√ß√£o para consultar a API do Gemini (ser√° usada quando necess√°rio)
def consultar_gemini(prompt, api_key):
    """
    Fun√ß√£o para consultar a API do Gemini
    """
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
    
    headers = {
        "Content-Type": "application/json"
    }
    
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ]
    }
    
    # Adicionar a chave API como par√¢metro na URL
    full_url = f"{url}?key={api_key}"
    
    response = requests.post(full_url, headers=headers, json=data)
    
    if response.status_code == 200:
        return response.json()["candidates"][0]["content"]["parts"][0]["text"]
    else:
        return f"Erro ao consultar a API: {response.status_code} - {response.text}"

# Fun√ß√£o para calcular o risco cir√∫rgico baseado nas respostas
def calcular_risco_cirurgico(respostas):
    """
    Calcula o risco cir√∫rgico com base nas respostas fornecidas
    """
    pontos = 0
    fatores_graves = 0
    
    # Idade
    if respostas['idade'] >= 70:
        pontos += 3
    elif respostas['idade'] >= 60:
        pontos += 2
    elif respostas['idade'] >= 50:
        pontos += 1
    
    # Comorbidades
    for comorbidade in respostas['comorbidades']:
        if comorbidade in ['Diabetes descompensada', 'Insufici√™ncia card√≠aca', 'Doen√ßa coronariana grave', 'DPOC grave']:
            pontos += 3
            fatores_graves += 1
        elif comorbidade in ['Hipertens√£o n√£o controlada', 'Diabetes controlada', 'Obesidade m√≥rbida']:
            pontos += 2
        elif comorbidade in ['Hipertens√£o controlada', 'Asma', 'Hipotireoidismo']:
            pontos += 1
    
    # Medica√ß√µes
    if respostas['usa_anticoagulantes']:
        pontos += 2
    
    if respostas['uso_corticoides']:
        pontos += 1
    
    # ASA
    if respostas['asa'] == 'ASA IV':
        pontos += 4
    elif respostas['asa'] == 'ASA III':
        pontos += 3
    elif respostas['asa'] == 'ASA II':
        pontos += 1
    
    # Cirurgia recente
    if respostas['cirurgia_recente']:
        pontos += 2
    
    # Complexidade da cirurgia
    if respostas['complexidade_cirurgia'] == 'Alta':
        pontos += 3
    elif respostas['complexidade_cirurgia'] == 'M√©dia':
        pontos += 2
    elif respostas['complexidade_cirurgia'] == 'Baixa':
        pontos += 1
    
    # Avaliar risco total
    if pontos >= 10 or fatores_graves >= 2:
        return "Alto", pontos
    elif pontos >= 6:
        return "M√©dio", pontos
    else:
        return "Baixo", pontos

# Fun√ß√£o para determinar o tempo de jejum
def determinar_jejum(tipo_cirurgia, tipo_anestesia):
    """
    Determina o tempo de jejum com base no tipo de cirurgia e anestesia
    """
    # Padr√£o de jejum para s√≥lidos
    jejum_solidos = 8  # horas
    
    # Padr√£o de jejum para l√≠quidos claros
    if tipo_anestesia == "Geral" or tipo_anestesia == "Regional":
        jejum_liquidos_claros = 2  # horas
    else:
        jejum_liquidos_claros = 1  # hora
        
    # Ajuste com base no tipo de cirurgia
    if tipo_cirurgia == "Cirurgia abdominal":
        jejum_solidos = 10
    elif tipo_cirurgia == "Cirurgia ambulatorial simples" and tipo_anestesia == "Local":
        jejum_solidos = 6
    
    return {
        "solidos": jejum_solidos,
        "liquidos_claros": jejum_liquidos_claros
    }

# Fun√ß√£o para gerar recomenda√ß√µes personalizadas
def gerar_recomendacoes(respostas, risco, api_key=None):
    """
    Gera recomenda√ß√µes personalizadas com base nas respostas e no risco calculado
    """
    recomendacoes = []
    
    # Recomenda√ß√µes baseadas na idade
    if respostas['idade'] >= 70:
        recomendacoes.append("Considere uma avalia√ß√£o geri√°trica pr√©-operat√≥ria.")
    
    # Recomenda√ß√µes baseadas em comorbidades
    for comorbidade in respostas['comorbidades']:
        if comorbidade == 'Diabetes descompensada':
            recomendacoes.append("√â importante controlar seus n√≠veis de glicose antes da cirurgia. Agende uma consulta com seu endocrinologista.")
        elif comorbidade == 'Hipertens√£o n√£o controlada':
            recomendacoes.append("Sua press√£o arterial deve ser controlada antes do procedimento. Continue tomando seus medicamentos conforme orienta√ß√£o m√©dica.")
        elif comorbidade == 'Insufici√™ncia card√≠aca':
            recomendacoes.append("Mantenha-se em dia com suas medica√ß√µes card√≠acas e informe a equipe m√©dica sobre todos os sintomas recentes.")
    
    # Recomenda√ß√µes baseadas no uso de medicamentos
    if respostas['usa_anticoagulantes']:
        recomendacoes.append("Voc√™ precisar√° interromper o uso de anticoagulantes antes da cirurgia. Consulte seu m√©dico para um plano de interrup√ß√£o segura.")
    
    # Recomenda√ß√µes baseadas no risco
    if risco == "Alto":
        recomendacoes.append("Seu risco cir√∫rgico √© elevado. √â altamente recomend√°vel uma avalia√ß√£o cardiol√≥gica completa antes do procedimento.")
    elif risco == "M√©dio":
        recomendacoes.append("Seu risco cir√∫rgico √© moderado. Considere realizar exames pr√©-operat√≥rios adicionais conforme orienta√ß√£o m√©dica.")
    
    # Se tiver API key do Gemini, pode personalizar ainda mais as recomenda√ß√µes
    if api_key:
        try:
            prompt = f"""
            Com base no paciente com as seguintes caracter√≠sticas:
            - Idade: {respostas['idade']} anos
            - Comorbidades: {', '.join(respostas['comorbidades']) if respostas['comorbidades'] else 'Nenhuma'}
            - Classifica√ß√£o ASA: {respostas['asa']}
            - Usa anticoagulantes: {'Sim' if respostas['usa_anticoagulantes'] else 'N√£o'}
            - Usa corticoides: {'Sim' if respostas['uso_corticoides'] else 'N√£o'}
            - Tipo de cirurgia: {respostas['tipo_cirurgia']}
            - Complexidade da cirurgia: {respostas['complexidade_cirurgia']}
            
            Forne√ßa 3 recomenda√ß√µes espec√≠ficas para este paciente no per√≠odo pr√©-operat√≥rio, considerando que seu risco cir√∫rgico foi classificado como {risco}.
            D√™ recomenda√ß√µes objetivas e pr√°ticas, sem introdu√ß√µes ou conclus√µes.
            """
            
            recomendacoes_ia = consultar_gemini(prompt, api_key)
            # Processar e adicionar as recomenda√ß√µes da IA
            for linha in recomendacoes_ia.strip().split('\n'):
                if linha and not linha.startswith('Recomenda√ß√µes:'):
                    # Remover numera√ß√£o e pontos se existirem
                    linha_limpa = ' '.join(linha.split('. ')[1:]) if '. ' in linha else linha
                    linha_limpa = linha_limpa.strip('- ').strip()
                    if linha_limpa and len(linha_limpa) > 10:  # Verificar se √© uma recomenda√ß√£o v√°lida
                        recomendacoes.append(linha_limpa)
        except Exception as e:
            recomendacoes.append(f"N√£o foi poss√≠vel gerar recomenda√ß√µes personalizadas adicionais. Erro: {str(e)}")
    
    return recomendacoes

# Fun√ß√£o para gerar um PDF de relat√≥rio
def gerar_relatorio_pdf(respostas, risco, pontos, jejum, recomendacoes):
    """
    Fun√ß√£o para criar um relat√≥rio em HTML que pode ser convertido para PDF
    """
    html = f"""
    <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                h1, h2 {{ color: #3498db; }}
                .risco-alto {{ color: #e74c3c; font-weight: bold; }}
                .risco-medio {{ color: #f39c12; font-weight: bold; }}
                .risco-baixo {{ color: #2ecc71; font-weight: bold; }}
                .info-box {{ background-color: #d4edff; padding: 15px; margin: 10px 0; border-radius: 5px; }}
                table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>Relat√≥rio de Avalia√ß√£o Pr√©-Operat√≥ria</h1>
            <p><strong>Data de gera√ß√£o:</strong> {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
            
            <h2>Informa√ß√µes do Paciente</h2>
            <table>
                <tr><th>Idade</th><td>{respostas['idade']} anos</td></tr>
                <tr><th>Comorbidades</th><td>{', '.join(respostas['comorbidades']) if respostas['comorbidades'] else 'Nenhuma'}</td></tr>
                <tr><th>Classifica√ß√£o ASA</th><td>{respostas['asa']}</td></tr>
                <tr><th>Uso de anticoagulantes</th><td>{'Sim' if respostas['usa_anticoagulantes'] else 'N√£o'}</td></tr>
                <tr><th>Uso de corticoides</th><td>{'Sim' if respostas['uso_corticoides'] else 'N√£o'}</td></tr>
                <tr><th>Cirurgia recente (√∫ltimos 3 meses)</th><td>{'Sim' if respostas['cirurgia_recente'] else 'N√£o'}</td></tr>
            </table>
            
            <h2>Informa√ß√µes da Cirurgia</h2>
            <table>
                <tr><th>Tipo de Cirurgia</th><td>{respostas['tipo_cirurgia']}</td></tr>
                <tr><th>Tipo de Anestesia</th><td>{respostas['tipo_anestesia']}</td></tr>
                <tr><th>Complexidade</th><td>{respostas['complexidade_cirurgia']}</td></tr>
            </table>
            
            <h2>Avalia√ß√£o de Risco</h2>
    """
    
    if risco == "Alto":
        html += f'<p>Risco Cir√∫rgico: <span class="risco-alto">ALTO</span> (Pontua√ß√£o: {pontos})</p>'
    elif risco == "M√©dio":
        html += f'<p>Risco Cir√∫rgico: <span class="risco-medio">M√âDIO</span> (Pontua√ß√£o: {pontos})</p>'
    else:
        html += f'<p>Risco Cir√∫rgico: <span class="risco-baixo">BAIXO</span> (Pontua√ß√£o: {pontos})</p>'
    
    html += f"""
            <div class="info-box">
                <h3>Orienta√ß√µes de Jejum</h3>
                <p><strong>Alimentos s√≥lidos:</strong> {jejum['solidos']} horas antes da cirurgia</p>
                <p><strong>L√≠quidos claros:</strong> {jejum['liquidos_claros']} horas antes da cirurgia</p>
                <p><small>Nota: L√≠quidos claros incluem √°gua, ch√° sem leite, suco de fruta sem polpa.</small></p>
            </div>
            
            <h2>Recomenda√ß√µes Personalizadas</h2>
            <ul>
    """
    
    for recomendacao in recomendacoes:
        html += f"<li>{recomendacao}</li>"
    
    html += """
            </ul>
            
            <p style="margin-top: 40px; font-style: italic;">
                Este relat√≥rio foi gerado automaticamente e n√£o substitui a avalia√ß√£o m√©dica.
                Consulte seu m√©dico para orienta√ß√µes espec√≠ficas relacionadas ao seu caso.
            </p>
        </body>
    </html>
    """
    
    return html

# Fun√ß√£o para converter HTML em PDF (simplificada - apenas retorna o HTML)
def html_para_download(html_string):
    """
    Converte HTML para um link de download
    """
    # Nesta implementa√ß√£o, retornaremos apenas o HTML para download
    # Em um ambiente real, voc√™ usaria uma biblioteca como weasyprint ou reportlab para gerar um PDF
    
    encoded = base64.b64encode(html_string.encode()).decode()
    return f'data:text/html;base64,{encoded}'

# Definir estrutura da aplica√ß√£o
def main():
    st.title("üè• Auxiliar Pr√©-Operat√≥rio")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        api_key = st.text_input("API Key do Gemini (opcional)", type="password")
        st.write("---")
        st.write("Desenvolvido com ‚ù§Ô∏è para aux√≠lio pr√©-operat√≥rio")
    
    # Abas da aplica√ß√£o
    tab1, tab2, tab3 = st.tabs(["üìã Avalia√ß√£o de Risco", "‚ÑπÔ∏è Informa√ß√µes", "‚ùì D√∫vidas Frequentes"])
    
    with tab1:
        st.header("Avalia√ß√£o de Risco Cir√∫rgico")
        st.write("Preencha o formul√°rio abaixo para avaliar seu risco cir√∫rgico e receber orienta√ß√µes personalizadas.")
        
        # Inicializar vari√°veis de sess√£o se necess√°rio
        if 'respostas' not in st.session_state:
            st.session_state.respostas = {
                'idade': 0,
                'comorbidades': [],
                'asa': 'ASA I',
                'usa_anticoagulantes': False,
                'uso_corticoides': False,
                'cirurgia_recente': False,
                'tipo_cirurgia': 'Cirurgia geral',
                'tipo_anestesia': 'Geral',
                'complexidade_cirurgia': 'M√©dia'
            }
        
        if 'resultado_calculado' not in st.session_state:
            st.session_state.resultado_calculado = False
            
        if 'relatorio_html' not in st.session_state:
            st.session_state.relatorio_html = ""
        
        # Formul√°rio de avalia√ß√£o
        with st.form("formulario_avaliacao"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Dados do Paciente")
                st.session_state.respostas['idade'] = st.number_input("Idade", min_value=0, max_value=120, value=st.session_state.respostas['idade'])
                
                st.session_state.respostas['comorbidades'] = st.multiselect(
                    "Comorbidades",
                    options=[
                        "Hipertens√£o controlada", 
                        "Hipertens√£o n√£o controlada", 
                        "Diabetes controlada", 
                        "Diabetes descompensada",
                        "Insufici√™ncia card√≠aca",
                        "Doen√ßa coronariana grave",
                        "DPOC grave",
                        "Asma",
                        "Obesidade m√≥rbida",
                        "Hipotireoidismo",
                        "Doen√ßa renal cr√¥nica",
                        "Cirrose hep√°tica"
                    ],
                    default=st.session_state.respostas['comorbidades']
                )
                
                st.session_state.respostas['asa'] = st.selectbox(
                    "Classifica√ß√£o ASA",
                    options=["ASA I", "ASA II", "ASA III", "ASA IV", "ASA V"],
                    index=["ASA I", "ASA II", "ASA III", "ASA IV", "ASA V"].index(st.session_state.respostas['asa']),
                    help="ASA I: Paciente saud√°vel; ASA II: Doen√ßa sist√™mica leve; ASA III: Doen√ßa sist√™mica grave; ASA IV: Doen√ßa sist√™mica grave com risco de vida; ASA V: Paciente moribundo"
                )
                
                st.session_state.respostas['usa_anticoagulantes'] = st.checkbox(
                    "Utiliza anticoagulantes", 
                    value=st.session_state.respostas['usa_anticoagulantes'],
                    help="Ex: Varfarina, Heparina, Aspirina, Clopidogrel"
                )
                
                st.session_state.respostas['uso_corticoides'] = st.checkbox(
                    "Utiliza corticoides", 
                    value=st.session_state.respostas['uso_corticoides'],
                    help="Ex: Prednisona, Dexametasona"
                )
                
                st.session_state.respostas['cirurgia_recente'] = st.checkbox(
                    "Realizou cirurgia nos √∫ltimos 3 meses", 
                    value=st.session_state.respostas['cirurgia_recente']
                )
            
            with col2:
                st.subheader("Dados da Cirurgia")
                st.session_state.respostas['tipo_cirurgia'] = st.selectbox(
                    "Tipo de Cirurgia",
                    options=[
                        "Cirurgia geral", 
                        "Cirurgia card√≠aca", 
                        "Cirurgia vascular", 
                        "Neurocirurgia",
                        "Cirurgia ortop√©dica",
                        "Cirurgia abdominal",
                        "Cirurgia ambulatorial simples"
                    ],
                    index=["Cirurgia geral", "Cirurgia card√≠aca", "Cirurgia vascular", "Neurocirurgia", "Cirurgia ortop√©dica", "Cirurgia abdominal", "Cirurgia ambulatorial simples"].index(st.session_state.respostas['tipo_cirurgia'])
                )
                
                st.session_state.respostas['tipo_anestesia'] = st.selectbox(
                    "Tipo de Anestesia",
                    options=["Geral", "Regional", "Local", "Seda√ß√£o"],
                    index=["Geral", "Regional", "Local", "Seda√ß√£o"].index(st.session_state.respostas['tipo_anestesia'])
                )
                
                st.session_state.respostas['complexidade_cirurgia'] = st.select_slider(
                    "Complexidade da Cirurgia",
                    options=["Baixa", "M√©dia", "Alta"],
                    value=st.session_state.respostas['complexidade_cirurgia']
                )
            
            submit_button = st.form_submit_button("Calcular Risco")
            
            if submit_button:
                with st.spinner("Calculando risco cir√∫rgico..."):
                    # Calcular risco
                    risco, pontos = calcular_risco_cirurgico(st.session_state.respostas)
                    
                    # Determinar tempo de jejum
                    jejum = determinar_jejum(
                        st.session_state.respostas['tipo_cirurgia'], 
                        st.session_state.respostas['tipo_anestesia']
                    )
                    
                    # Gerar recomenda√ß√µes
                    recomendacoes = gerar_recomendacoes(st.session_state.respostas, risco, api_key)
                    
                    # Gerar HTML do relat√≥rio
                    relatorio_html = gerar_relatorio_pdf(
                        st.session_state.respostas,
                        risco,
                        pontos,
                        jejum,
                        recomendacoes
                    )
                    
                    # Armazenar resultado na sess√£o
                    st.session_state.resultado = {
                        'risco': risco,
                        'pontos': pontos,
                        'jejum': jejum,
                        'recomendacoes': recomendacoes
                    }
                    
                    st.session_state.resultado_calculado = True
                    st.session_state.relatorio_html = relatorio_html
        
        # Exibir resultado se calculado
        if st.session_state.resultado_calculado:
            st.write("---")
            
            # Exibir resultado do risco
            if st.session_state.resultado['risco'] == "Alto":
                st.markdown(f"### Risco Cir√∫rgico: <span class='risk-high'>ALTO</span> (Pontua√ß√£o: {st.session_state.resultado['pontos']})", unsafe_allow_html=True)
                st.markdown("<div class='warning-box'>Este risco indica necessidade de avalia√ß√£o especializada antes do procedimento.</div>", unsafe_allow_html=True)
            elif st.session_state.resultado['risco'] == "M√©dio":
                st.markdown(f"### Risco Cir√∫rgico: <span class='risk-medium'>M√âDIO</span> (Pontua√ß√£o: {st.session_state.resultado['pontos']})", unsafe_allow_html=True)
                st.markdown("<div class='info-box'>Este risco indica que voc√™ deve seguir cuidadosamente todas as recomenda√ß√µes m√©dicas.</div>", unsafe_allow_html=True)
            else:
                st.markdown(f"### Risco Cir√∫rgico: <span class='risk-low'>BAIXO</span> (Pontua√ß√£o: {st.session_state.resultado['pontos']})", unsafe_allow_html=True)
                st.markdown("<div class='success-box'>Este risco indica uma boa condi√ß√£o pr√©-operat√≥ria, mas ainda √© importante seguir todas as recomenda√ß√µes.</div>", unsafe_allow_html=True)
            
            # Exibir orienta√ß√µes de jejum
            st.subheader("Orienta√ß√µes de Jejum")
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"**Alimentos s√≥lidos:** {st.session_state.resultado['jejum']['solidos']} horas antes da cirurgia")
            with col2:
                st.markdown(f"**L√≠quidos claros:** {st.session_state.resultado['jejum']['liquidos_claros']} horas antes da cirurgia")
            st.caption("L√≠quidos claros incluem √°gua, ch√° sem leite, suco de fruta sem polpa.")
            
            # Exibir recomenda√ß√µes
            st.subheader("Recomenda√ß√µes Personalizadas")
            for rec in st.session_state.resultado['recomendacoes']:
                st.markdown(f"- {rec}")
            
            # Bot√£o para download do relat√≥rio
            download_link = html_para_download(st.session_state.relatorio_html)
            st.download_button(
                label="üì• Baixar Relat√≥rio",
                data=st.session_state.relatorio_html,
                file_name="relatorio_pre_operatorio.html",
                mime="text/html"
            )
    
    with tab2:
        st.header("Informa√ß√µes Importantes")
        
        st.subheader("Classifica√ß√£o ASA")
        st.markdown("""
        A classifica√ß√£o ASA (American Society of Anesthesiologists) √© um sistema usado para avaliar a condi√ß√£o f√≠sica de um paciente antes da cirurgia:
        
        - **ASA I** - Paciente saud√°vel
        - **ASA II** - Paciente com doen√ßa sist√™mica leve
        - **ASA III** - Paciente com doen√ßa sist√™mica grave
        - **ASA IV** - Paciente com doen√ßa sist√™mica grave que representa risco de vida constante
        - **ASA V** - Paciente moribundo que n√£o se espera que sobreviva sem a opera√ß√£o
        """)
        
        st.subheader("Orienta√ß√µes Gerais sobre Jejum")
        st.markdown("""
        O jejum pr√©-operat√≥rio √© essencial para evitar complica√ß√µes como aspira√ß√£o pulmonar durante a anestesia:
        
        1. **Alimentos s√≥lidos**: Geralmente 8 horas antes da cirurgia
        2. **Leite e produtos l√°cteos**: 6 horas antes da cirurgia
        3. **L√≠quidos claros** (√°gua, ch√° sem leite, suco sem polpa): 2 horas antes para anestesia geral/regional
        
        > Nota: Estas s√£o orienta√ß√µes gerais. Siga sempre as instru√ß√µes espec√≠ficas da sua equipe m√©dica.
        """)
        
        st.subheader("Medica√ß√µes")
        st.markdown("""
        **Medica√ß√µes que geralmente devem ser suspensas:**
        - Anticoagulantes (conforme orienta√ß√£o m√©dica espec√≠fica)
        - Anti-inflamat√≥rios n√£o esteroidais (geralmente 7 dias antes)
        
        **Medica√ß√µes que geralmente devem ser mantidas:**
        - Anti-hipertensivos (com pequeno gole de √°gua)
        - Medica√ß√µes card√≠acas
        - Medica√ß√µes para controle de convuls√µes
        
        > Importante: Nunca suspenda medica√ß√µes sem orienta√ß√£o m√©dica espec√≠fica.
        """)
    
    with tab3:
        st.header("D√∫vidas Frequentes")
        
        with st.expander("O que √© avalia√ß√£o pr√©-operat√≥ria?"):
            st.write("""
            A avalia√ß√£o pr√©-operat√≥ria √© um processo de avalia√ß√£o da sa√∫de geral do paciente antes de uma cirurgia. Ela ajuda a:
            
            - Identificar fatores de risco que podem complicar a cirurgia ou anestesia
            - Otimizar condi√ß√µes m√©dicas existentes
            - Reduzir complica√ß√µes p√≥s-operat√≥rias
            - Planejar o manejo perioperat√≥rio adequado
            """)
        
        with st.expander("Posso tomar √°gua antes da cirurgia?"):
            st.write("""
            Em muitos casos, √© permitido beber √°gua e outros l√≠quidos claros (sem polpa, sem leite) at√© 2 horas antes da cirurgia com anestesia geral ou regional. Para anestesia local, pode-se permitir at√© 1 hora antes.
            
            No entanto, √© fundamental seguir as orienta√ß√µes espec√≠ficas de sua equipe m√©dica, pois existem exce√ß√µes dependendo do tipo de cirurgia e da condi√ß√£o do paciente.
            """)
        
        with st.expander("Quais exames devo fazer antes da cirurgia?"):
            st.write("""
            Os exames pr√©-operat√≥rios variam conforme o tipo de cirurgia e condi√ß√£o do paciente. Os mais comuns incluem:
            
            - **Exames de sangue**: Hemograma completo, coagulograma, fun√ß√£o renal e hep√°tica
            - **Eletrocardiograma (ECG)**: Especialmente para pacientes acima de 40 anos ou com fatores de risco card√≠aco
            - **Raio-X de t√≥rax**: Para avaliar condi√ß√£o pulmonar
            - **Outros exames espec√≠ficos**: Dependendo de suas condi√ß√µes m√©dicas ou tipo de cirurgia
            
            Seu m√©dico ir√° solicitar os exames necess√°rios com base no seu caso espec√≠fico.
            """)
            
        with st.expander("Preciso suspender meus medicamentos antes da cirurgia?"):
            st.write("""
            A decis√£o de continuar ou suspender medicamentos antes da cirurgia √© individual e deve ser tomada pelo seu m√©dico. Em geral:
            
            - **Medicamentos para press√£o alta, card√≠acos e anti-convulsivantes**: Geralmente s√£o mantidos at√© o dia da cirurgia
            - **Anticoagulantes e anti-inflamat√≥rios**: Frequentemente precisam ser suspensos dias antes
            - **Antidiab√©ticos orais e insulina**: Podem precisar de ajustes no dia da cirurgia
            
            Nunca suspenda medicamentos por conta pr√≥pria. Sempre consulte seu m√©dico para orienta√ß√µes espec√≠ficas.
            """)
            
        with st.expander("Como me preparar emocionalmente para a cirurgia?"):
            st.write("""
            Preparar-se emocionalmente para uma cirurgia √© t√£o importante quanto a prepara√ß√£o f√≠sica. Algumas dicas:
            
            - **Informe-se adequadamente**: Conhecimento reduz ansiedade
            - **Pratique t√©cnicas de relaxamento**: Respira√ß√£o profunda, medita√ß√£o ou visualiza√ß√£o
            - **Converse sobre seus medos**: Com seu m√©dico, familiares ou amigos
            - **Mantenha uma atitude positiva**: Foque no resultado do tratamento e n√£o no procedimento
            - **Descanse adequadamente**: Antes da cirurgia, tente dormir bem
            
            Se a ansiedade for intensa, mencione ao seu m√©dico, pois existem medica√ß√µes que podem ajudar.
            """)
            
        with st.expander("O que levar para o hospital no dia da cirurgia?"):
            st.write("""
            Itens importantes para levar ao hospital:
            
            - **Documentos**: Identidade, cart√£o do plano de sa√∫de, termo de consentimento
            - **Exames pr√©-operat√≥rios**: Todos os exames solicitados
            - **Lista de medicamentos**: Que voc√™ usa regularmente com doses
            - **Objetos pessoais b√°sicos**: Escova de dentes, chinelos, roupas confort√°veis
            - **Dispositivos m√©dicos**: Se aplic√°vel (inaladores, aparelhos auditivos)
            
            Evite levar objetos de valor, joias ou maquiagem.
            """)
            
        with st.expander("Quanto tempo antes devo chegar ao hospital?"):
            st.write("""
            Em geral, √© recomendado chegar ao hospital:
            
            - **Cirurgias ambulatoriais**: 1-2 horas antes do hor√°rio agendado
            - **Cirurgias com interna√ß√£o**: 2-3 horas antes do hor√°rio agendado
            
            Este tempo √© necess√°rio para procedimentos administrativos, avalia√ß√£o pr√©-anest√©sica final e prepara√ß√£o do paciente. Siga sempre as orienta√ß√µes espec√≠ficas da sua equipe m√©dica ou hospital.
            """)
            
    # Rodap√©
    st.write("---")
    st.caption("Este aplicativo n√£o substitui a avalia√ß√£o m√©dica profissional. Sempre consulte seu m√©dico para orienta√ß√µes espec√≠ficas sobre seu caso.")

if __name__ == "__main__":
    main()